-- [nfnl] Compiled from lua/plugins/which-key.fnl by https://github.com/Olical/nfnl, do not edit.
local u = require("util")
local function _1_()
  do
    local wk = require("which-key")
    wk.add({{"<leader>.", "<cmd>ToggleTerm<cr>", desc = "toggle terminal", mode = "n"}, {"<leader><tab>", "<cmd>b#<cr>", desc = "next buffer", mode = "n"}, {"<leader>+", "<cmd>resize +3<cr>", desc = "increase height", mode = "n"}, {"<leader>=", "<cmd>resize +3<cr>", desc = "increase height", mode = "n"}, {"<leader>-", "<cmd>resize -3<cr>", desc = "decrease height", mode = "n"}, {"<leader><char-62>", "<cmd>vertical resize +3<cr>", desc = "increase width", mode = "n"}, {"<leader><lt>", "<cmd>vertical resize -3<cr>", desc = "decrease width", mode = "n"}})
    wk.add({{"<leader>b", group = "buffers"}, {"<leader>ba", "<cmd>ball<cr>", desc = "open all buffers", mode = "n"}, {"<leader>bb", "<cmd>Telescope buffers<cr>", desc = "list buffers", mode = "n"}, {"<leader>bd", "<cmd>bdelete<cr>", desc = "delete current buffer", mode = "n"}, {"<leader>bn", "<cmd>bnext<cr>", desc = "next buffer", mode = "n"}, {"<leader>bp", "<cmd>bprevious<cr>", desc = "previous buffer", mode = "n"}})
    wk.add({{"<leader>e", group = "errors"}, {"<leader>et", "<cmd>Trouble diagnistics toggle<cr>", desc = "toggle diagnostics view", mode = "n"}})
    wk.add({{"<leader>f", group = "files"}, {"<leader>ff", "<cmd>Telescope find_files<cr>", desc = "project files", mode = "n"}, {"<leader>f/", "<cmd>Telescope live_grep<cr>", desc = "grep in workspace", mode = "n"}, {"<leader>ft", "<cmd>NvimTreeToggle<cr>", desc = "toggle file tree", mode = "n"}})
    wk.add({{"<leader>g", group = "git"}, {"<leader>gb", "<cmd>Gitsigns toggle_current_line_blame<cr>", desc = "toggle git blame", mode = "n"}, {"<leader>gg", "<cmd>Fugit2<cr>", desc = "fugit 2", mode = "n"}, {"<leader>gl", "<cmd>Telescope git_commits<cr>", desc = "git log", mode = "n"}, {"<leader>gp", "<cmd>Git pull<cr>", desc = "git pull", mode = "n"}, {"<leader>gP", "<cmd>Git push<cr>", desc = "git push", mode = "n"}, {"<leader>gs", "<cmd>Telescope git_status<cr>", desc = "git status", mode = "n"}})
    wk.add({{"<leader>l", group = "lsp"}})
    wk.add({{"<leader>n", group = "notes"}}, {"<leader>nn", "<cmd>ObsidianQuickSwitch<cr>", desc = "note picker", mode = "n"}, {"<leader>nt", "<cmd>ObsidianToday<cr>", desc = "today's note", mode = "n"}, {"<leader>nT", "<cmd>vimgrep /- \\[ \\]/ **/* | Trouble quickfix<cr>", desc = "unchecked todos", mode = "n"})
    wk.add({{"<leader>p", group = "projects"}}, {"<leader>pp", "<cmd>lua require'telescope'.extensions.project.project{ display_type = 'full' }<cr>", desc = "project switcher", mode = "n"}, {"<leader>pt", "<cmd>TodoTelescope<cr>", desc = "project todos", mode = "n"})
    wk.add({{"<leader>P", group = "plugins"}}, {"<leader>Pl", "<cmd>Lazy<cr>", desc = "plugin manager (lazy.nvim)", mode = "n"}, {"<leader>Pm", "<cmd>Mason<cr>", desc = "lsp manager (mason)", mode = "n"})
    wk.add({{"<leader>r", group = "run"}, {"<leader>rv", "<cmd>ToggleTermSendVisualLines<cr>", desc = "run visual selection in terminal", mode = "v"}})
    wk.add({{"<leader>t", group = "tabs"}}, {"<leader>tt", "<cmd>Telescope tele_tabby list<cr>", desc = "list tabs", mode = "n"}, {"<leader>td", "<cmd>tabclose<cr>", desc = "close current tab", mode = "n"}, {"<leader>tn", "<cmd>tabnext<cr>", desc = "next tab", mode = "n"}, {"<leader>tN", "<cmd>tabnew<cr>", desc = "New tab", mode = "n"}, {"<leader>tp", "<cmd>tabprevious<cr>", desc = "previous tab", mode = "n"}, {"<leader>to", "<cmd>tabonly<cr>", desc = "close other tabs", mode = "n"}, {"<leader>tm", "<cmd>tab sp<cr>", desc = "open current buffer in new tab", mode = "n"})
    wk.add({{"<leader>w", group = "windows"}, {"<leader>wh", "<cmd>wincmd h<cr>", desc = "window left", mode = "n"}, {"<leader>wj", "<cmd>wincmd j<cr>", desc = "window down", mode = "n"}, {"<leader>wk", "<cmd>wincmd k<cr>", desc = "window up", mode = "n"}, {"<leader>wl", "<cmd>wincmd l<cr>", desc = "window right", mode = "n"}, {"<leader>w1", "<cmd>1 wincmd w<cr>", desc = "window 1", mode = "n"}, {"<leader>w2", "<cmd>2 wincmd w<cr>", desc = "window 2", mode = "n"}, {"<leader>w3", "<cmd>3 wincmd w<cr>", desc = "window 3", mode = "n"}, {"<leader>wo", "<cmd>only<cr>", desc = "close other windows", mode = "n"}, {"<leader>wn", "<cmd>split<cr>", desc = "split (horizontal)", mode = "n"}, {"<leader>w|", "<cmd>vsplit<cr>", desc = "split (vertical)", mode = "n"}, {"<leader>wq", "<cmd>close<cr>", desc = "close"}})
  end
  vim.o.timeoutlen = 300
  return nil
end
return {u.tx("folke/which-key.nvim", {event = "VeryLazy", init = _1_, opts = {}})}
