#profiling
#zmodload zsh/zprof

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# project folder that we can `c [tab]` to
export PROJECTS=~/workspace

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# source *.zsh files explicity (other than path.zsh and completion.zsh)

source ~/.dotfiles/zsh/aliases.zsh
source ~/.dotfiles/zsh/window.zsh
source ~/.dotfiles/zsh/prompt.zsh
source ~/.dotfiles/zsh/editor.zsh
source ~/.dotfiles/zsh/config.zsh

source ~/.dotfiles/iterm/shell_integration.zsh
source ~/.dotfiles/git/aliases.zsh
source ~/.dotfiles/pyenv/pyenv.zsh
source ~/.dotfiles/nvm/nvm.zsh
source ~/.dotfiles/java/jenv.zsh
source ~/.dotfiles/java/java.zsh

# initialize autocomplete
autoload -Uz compinit


# compile zcomdump if needed
ZCOMPDUMP=${HOME}/.zcompdump
if [ $(date +'%j') != $(/usr/bin/stat -f '%Sm' -t '%j' ${ZCOMPDUMP}) ]; then
  compinit
else
  compinit -C
fi

if [[ -s "${ZCOMPDUMP}" && (! -s "${ZCOMPDUMP}.zwc" || "${ZCOMPDUMP}" -nt "${ZCOMPDUMP}.zwc")  ]]; then
  zcompile "${ZCOMPDUMP}"
fi &!

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
zstyle ':completion:*' menu select
zmodload zsh/complist
bindkey -v
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey -M vicmd 'k' up-line-or-beginning-search # Up
bindkey -M vicmd 'j' down-line-or-beginning-search # Down
bindkey -M vicmd '?' history-incremental-search-backward

PATH=$PATH:$HOME/workspace/bin

eval "$(direnv hook zsh)"

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

source "$CROSSBEAM_CODE_DIR"/devops/bin/shell-utilities # RAZOR SHELL-UTILITIES

#profiling
#zprof
